{
  -------------------------------------------------
  //Content-Type:application/json; charset = utf-8
  -------------------------------------------------
  createStreet: {
    headers:{},
    body:{
      streetName:"שם הרחוב",
      paswword:"הסיסמה של האדמין"
    },
    response:{
      id: "האי די שהמערכת נתנה לרחוב"
    }
  },
  createBuilding: {
    headers:{},
    body:{
      BuildingName: "שם הבניין, לדוגמא - 4 או 73ג",
      StreetId: "האי די של הרחוב שבו נמצא הבניין יש אנד פוינט ששולח את כל השמות והמספרי אי די של הרחובות,
    },
    response:{
      id: "האי די שהמערכת נתנה לבניין"
    }
  },
  createApartment: {
    headers:{},
    body:{
      apartamentName: "שם הדירה, לדוגמא 4 או דירה 4, או היחידה מימין, מה שהם מכניסים זה סבבה",
      buildingId: "האי די של הבניין שבו נמצאת הדירה יש אנד פוינט ששולח את כל השמות והמספרי אי די של הרחובות,
      StreetId: "האי די של הרחוב שבו נמצא הבניין יש אנד פוינט ששולח את כל השמות והמספרי אי די של הרחובות,
    },
    response:{
      id: "האי די שהמערכת נתנה לדירה"
    }
  },
  createApartmentPost: {
    headers:{},
    body:{
      apartamentID: "האי די של הדירה אליה אנחנו רוצים לצרף את הפוסט",
      startYear: "תחילת מגורים",
      endYear: "סוף מגורים",
      apartamentText: "חוות הדעת במילים",
      rank: "ציון כללי",
      rentCost: "שכירות",
      heshbonot: "חשבונות",
    },
    response:{
      id: "האי די שהמערכת נתנה לפוסט"
    }
  },
}

//////////////////          GET            ///////////////////////////

{
   createStreet: {
    headers:{},
    body:{
      streetName:"שם הרחוב",
      paswword:"הסיסמה של האדמין"
    },
    response:{
      id: "האי די שהמערכת נתנה לרחוב"
    }
  },

}

//@desc get all streets
router.get('/getAllStreets', ensureAuth, async (req , res)=>{  
  res.json(await Street.find({},{_id:0, Buildings:0}))// Id:1, Name:1
})


//@desc get all buildings in a street
router.get('/getBuildings', ensureAuth, async (req, res) => {
  res.json(await Street.find({Id:req.body.StreetId},{_id:0, CreatorsGoogleID: 0, Id:0, Name:0})) //Buildings:1
})


//@desc get all apartments in a Building
router.post('/getApartments', ensureAuth, async (req, res) => {
  res.json(await BU.find({BU_Id : req.body.BuildingId},{ 
    _id:0,
    CreatorsGoogleID: 0,
    BU_Name: 0,
    BU_Id:0,
    StreetId:0,
    // Apartments: 1
  }))
})


//@desc get all apartment posts for an apartment
router.get('/getApartmentPosts', ensureAuth, async(req, res) => {
  res.json(await APA_Post.find({APA_Id:req.body.ApartmentId},{
    _id:0,
    CreatorsGoogleID: 0,
    // PostId:1, 
    UserId:0,
    APA_Id:0,
    // startYear:1,
    // endYear:1,
    // APA_Text:1,
    // APA_rank:1,
    // rentCost:1,
    // heshbonot:1
  }))
})


//@desc get all building post for a building
router.get('/getBuildingPosts', ensureAuth, async(req, res) => {
  BU_Post.create(newBuilding)
  res.json(await BU_Post.find({BU_Id: req.body.BuildingId},{
    _id:0,
    CreatorsGoogleID: 0,
    // PostId: 1,
    UserId: 0,
    BU_Id: 0,
    apartamentID : 0,
    // startYear: 1,
    // endYear: 1,
    // BU_Students: 1,
    // BU_Text: 1,
    // BU_rank: 1 
  }))
})


//////////////////          update            ///////////////////////////

router.put('/updateBU_Post' , ensureAuth , async (req , res) => {
  if(await APA_Post.findOne({PostId : req.body.IdOfPost}).userId == req.user.userId){
    await APA_Post.update(
      { PostId : req.body.IdOfPost },
      { $set:
         {
          startYear: req.body.startYear,
          endYear: req.body.endYear,
          APA_Text: req.body.apartamentText,
          APA_rank: req.body.rank,
          rentCost: req.body.rentCost,
          heshbonot: req.body.heshbonot,
         }
      }
   )
  }
})

router.put('/updateBU_Post' , ensureAuth , async (req , res) => {
  if(await BU_Post.findOne({PostId : req.body.IdOfPost}).userId == req.user.userId){
    await BU_Post.update(
      { PostId : req.body.IdOfPost },
      { $set:
         {
          startYear: req.body.startYear,
          endYear: req.body.endYear,
          BU_Students: req.body.levelOfStudents,
          BU_Text: req.body.buildingText,
          BU_rank: req.body.buildingRank,
         }
      }
   )
  }
})


//////////////////          delet            ///////////////////////////

//@desc delet post by post id only if userId is muching

router.delete('/updateBU_Post' , ensureAuth , async (req , res) => {
  if(await APA_Post.findOne({PostId : req.body.IdOfPost}).userId == req.user.userId){
    await APA_Post.findOneAndDelete({PostId : req.body.IdOfPost})
  }
})

router.delete('/updateBU_Post' , ensureAuth , async (req , res) => {
  if(await BU_Post.findOne({PostId : req.body.IdOfPost}).userId == req.user.userId){
    await BU_Post.findOneAndDelete({PostId : req.body.IdOfPost})
  }
})

























//@desc login/landing
router.get('/JsonOfAllStreets', ensureAuth, (req, res) => {
  res.json([{
    name: "צ'רניכובסקי",
    id: 2040135469834
  }, {
    name: `חז"ל`,
    id: 1930135469834
  }])
})

//@desc login/landing
//@route GET /
router.get('/JsonOfAllBuilding', ensureAuth, (req, res) => {
  const steetId = req.body.streetId;
  res.json([{
    name: `1`,
    id: 2440135469834
  }, {
    name: "2ב",
    id: 1937135469834
  }])
})

//@desc login/landing
//@route GET /
router.get('/JsonOfAllApartments', ensureAuth, (req, res) => {
  const buldingId = req.body.streetId;
  res.json([{
    name: `1`,
    id: 2056135469834
  }, {
    name: `2`,
    id: 1930879469834
  }])
})

//@desc login/landing
//@route GET /
router.get('/JsonOfAllComments', ensureAuth, (req, res) => {
  const appartamentId = req.body.appartmentId;
  res.json({
    apartmentComments: [{
      apartamentID: 1937135469834,
      postID: 1937135469834,
      startYear: 2019,
      endYear: 2020,
      apartamentText: "היה ממש בסדר האמתר שום דבר חשוד",
      rank: 8,
      rentCost: 2500,
      heshbonot: 450
    }, ],
    buildingComments: [{
      buildingId: 1937135469834,
      levelOfStudents: 3,
      buildingText: "יש משאית זבל ששומעים בבוקר, חוץ מזה כלום",
      buildingRank: 6
    }]
  })
})



module.exports = router
